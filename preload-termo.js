// reload-termo.js

const { contextBridge, ipcRenderer } = require("electron");

console.log("üì• [PRELOAD-TERMO] preload-termo.js carregado.");

contextBridge.exposeInMainWorld("api", {
  // üìÑ Ler o termo markdown para exibir no termo.html
  lerTermoMarkdown: (idioma) => {
    console.log("üìÑ [PRELOAD-TERMO] Solicitando conte√∫do do termo em:", idioma);
    return ipcRenderer.invoke("ler-termo-md", idioma);
  },

  // ‚úÖ Envia evento ao processo principal indicando que o termo foi aceito
  enviarTermoAceito: () => {
    console.log("üì§ [PRELOAD-TERMO] Enviando evento 'termo-aceito' ao processo principal");
    ipcRenderer.send("termo-aceito");
  },

  // üíæ Salva o aceite no usuario.json
  salvarAceite: () => {
    console.log("üíæ [PRELOAD-TERMO] Solicitando salvamento do aceite no usuario.json");
    return ipcRenderer.invoke("salvar-aceite");
  },

  // üß™ Exibe aviso via modal reutiliz√°vel (se necess√°rio no termo)
  exibirAviso: (mensagem) => {
    console.log("‚ö†Ô∏è [PRELOAD-TERMO] Exibindo aviso:", mensagem);
    return ipcRenderer.invoke("exibir-aviso", mensagem);
  }
});

ipcRenderer.on("termo-aceito", (_, dados) => {
  console.log("üì• [PRELOAD] Evento 'termo-aceito' recebido no preload principal");
  if (typeof termoAceitoCallback === "function") {
    termoAceitoCallback();
    console.log("‚úÖ [PRELOAD] Callback do termo executado com sucesso.");
  } else {
    console.warn("‚ùå [PRELOAD] Callback do termo n√£o est√° definido.");
  }
});
