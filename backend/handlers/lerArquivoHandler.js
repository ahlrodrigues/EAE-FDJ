const fs = require("fs").promises;
const { ipcMain } = require("electron");
const { descriptografarComMestra } = require("../lib/criptografia");

// üìÑ Retorna conte√∫do bruto (JSON, texto, etc)
function registrarLerArquivoHandler() {
  ipcMain.handle("ler-arquivo", async (_, caminho) => {
    try {
      console.log("üì• [ler-arquivo] Lendo arquivo:", caminho);
      const conteudo = await fs.readFile(caminho, "utf-8");
      return conteudo; // ‚úÖ retorna como string ‚Äî sem parse e sem descriptografar
    } catch (erro) {
      console.error("‚ùå [ler-arquivo] Erro:", erro);
      throw erro;
    }
  });

  // üîê Apenas para arquivos criptografados de anota√ß√µes .txt
  ipcMain.handle("ler-anotacao-descriptografada", async (_, caminho) => {
    try {
      console.log("üì• [ler-anotacao-descriptografada] Arquivo:", caminho);
      const conteudo = await fs.readFile(caminho, "utf-8");

      const chave = process.env.CRYPTO_SECRET;
      if (!chave) throw new Error("CRYPTO_SECRET n√£o definido.");

      const texto = descriptografarComMestra(conteudo, chave);
      console.log("üîì Conte√∫do descriptografado com sucesso.");
      return texto;
    } catch (erro) {
      console.error("‚ùå [ler-anotacao-descriptografada] Erro:", erro);
      return null;
    }
  });

  // üìö Carrega m√∫ltiplas anota√ß√µes brutas (sem descriptografar)
  ipcMain.handle("ler-anotacoes-selecionadas", async (event, caminhos) => {
    try {
      const resultados = await Promise.all(
        caminhos.map(async (caminho) => {
          const conteudo = await fs.readFile(caminho, "utf-8");
          return conteudo;
        })
      );
      return resultados;
    } catch (erro) {
      console.error("‚ùå Erro ao ler anota√ß√µes selecionadas:", erro);
      throw erro;
    }
  });
}

module.exports = {
  registrarLerArquivoHandler,
};
