// backend/handlers/notas/salvarAnotacao.js
const fs = require("fs");
const path = require("path");
const os = require("os");
const { criptografarComMestra } = require("../../backend/lib/criptografia");

async function handleSalvarAnotacao(_, conteudo, nomeArquivo) {
  console.log("üìù [MAIN] Pedido para salvar anota√ß√£o recebido.");

  try {
    const usuarioPath = path.join(os.homedir(), ".config", "escola-aprendizes", "config", "usuario.json");

    if (!fs.existsSync(usuarioPath)) {
      console.error("‚ùå Arquivo usuario.json n√£o encontrado.");
      return { sucesso: false, erro: "Usu√°rio n√£o encontrado." };
    }

    const dadosStr = await fs.promises.readFile(usuarioPath, "utf-8");
    const dados = JSON.parse(dadosStr);
    const usuario = dados.usuarios?.[0];

    if (!usuario?.emailHash) {
      console.error("‚ùå emailHash n√£o encontrado no usu√°rio.");
      return { sucesso: false, erro: "Usu√°rio inv√°lido." };
    }

    const pastaNotas = path.join(os.homedir(), ".config", "escola-aprendizes", "notas", usuario.emailHash);
    await fs.promises.mkdir(pastaNotas, { recursive: true });

    const conteudoCriptografado = criptografarComMestra(anotacao, process.env.CRYPTO_SECRET);
    const caminhoFinal = path.join(pastaNotas, nomeArquivo);

    await fs.promises.writeFile(caminhoFinal, conteudoCriptografado, "utf-8");

    console.log("‚úÖ Anota√ß√£o salva com sucesso em:", caminhoFinal);
    return { sucesso: true };
  } catch (erro) {
    console.error("‚ùå Erro ao salvar anota√ß√£o:", erro.message);
    return { sucesso: false, erro: "Erro ao salvar anota√ß√£o." };
  }
}

module.exports = { handleSalvarAnotacao };
